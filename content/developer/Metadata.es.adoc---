---
weight: 6
title: "Metadata"
---

= 6. Metadata

== Introduccion

El módulo Metadata es usado para describir cómo se comportan las distintas
vistas en el módulo. Su utilidad es proveer información sobre los campos
y diseños de la vista, pero también puede usarse para filtrar subpaneles y describir
qué campos son usados en caso de una búsqueda.

== Localización

El módulo metadata se puede encontrar en:

.Ejemplo 6.1: Localización del módulo metadata
[source,php]
modules/<TheModule>/metadata/

== Personalización

Comunmente, Studio es la mejor forma de personalizar Metadata. Incluso
cuando se desea realizar personalizaciones que no son posibles usando únicamente
Studio, se puede apelar a él para hacer más simple la preparación de la base
donde desarrollar la solución customizada, principalmente para los diseños
basados en metadata.
La edición de la Metadata se realiza sobreescribiendo o editando el archivo en
el directorio Custom. Por ejemplo, para realizar un override de detailviewdefs
(que se ubica en `modules/Accounts/metadata/detailviewdefs.php`) se debe
crear, reemplazar o edita el contenido de la ruta `custom/modules/Accounts/metadata/detailviewdefs.php`.
La única excepción a ésta regla es el archivo studio.php: los módulos metadata
para el mismo tienen checkeo de locación y cualquier versión en la ruta
`custom/modules/<TheModule>/metadata/studio.php` es ignorada.

== Metadata diferente

=== detailviewdefs.php

detailviewdefs.php provee la información sobre el layout (diseño) y campos
de la vista de detalles para el módulo correspondiente. Éste archivo usa la misma
estructura que editviewdefs.php. Tomando un módulo ficcional `ABC_Vehicles`, un
ejemplo de DetailView sería:

.Example 6.2: Definición de metadata de un DetailView
[source,php]
----
<?php
$viewdefs ['ABC_Vehicles'] ['DetailView'] = array (
 'templateMeta' => array (
     'form' => array (
         'buttons' => array (
             'EDIT',
             'DUPLICATE',
             'DELETE',
             'FIND_DUPLICATES'
         )
     ),
     'maxColumns' => '2',
     'widths' => array (
         array (
             'label' => '10',
             'field' => '30'
         ),
         array (
             'label' => '10',
             'field' => '30'
         )
     ),
     'includes' => array (
         array (
             'file' => 'modules/ABC_Vehicles/ABC_VehiclesDetail.js'
         )
     )
 ),
 'panels' => array (
     'LBL_ABC_VEHICLES_INFO' => array (
         array (
             array (
                 'name' => 'nombre',
                 'comment' => 'The Name of the Vehicle',
                 'label' => 'LBL_NAME',
             ),
             'reg_number'
         ),
         array (
             array (
                 'name' => 'type',
                 'label' => 'LBL_TYPE',
             ),
             array (
                 'name' => 'phone_fax',
                 'comment' => 'The fax phone number of this company',
                 'label' => 'LBL_FAX'
             )
         ),
         array (
             array (
                 'name' => 'registered_address_street',
                 'label' => 'LBL_REGISTERED_ADDRESS',
                 'type' => 'address',
                 'displayParams' => array (
                     'key' => 'registered'
                 )
             ),
         ),
     ),
     'LBL_PANEL_ADVANCED' => array (
      array (
             array (
                 'name' => 'assigned_user_name',
                 'label' => 'LBL_ASSIGNED_TO'
             ),
             array (
                 'name' => 'date_modified',
                 'label' => 'LBL_DATE_MODIFIED',
                 'customCode' => '{$fields.date_modified.value} '
                         + '{$APP.LBL_BY} '
                         + '{$fields.modified_by_name.value}',
             )
         ),
     ),
  )
);
?>
----

La linea 2 define una matriz `$viewdefs['ABC_Vehicles']['DetailView']`
que genera una entrada a DetailView para el módulo ABC_Vehicles en `$viewdefs`
(DetailView será un EditView o un QuickCreateView segun corresponda). Ésta
matriz tiene dos keys definidas:

=== templateMeta
La llave templateMeta provee información acerca de la vista en general:

`['form']['buttons']`::
  Es una matriz que define los botones que apareceran en la vista (dispuestos estos también dentro de una matriz).
`maxColumns`::
  Define el número de columnas usadas en ésta vista. No suele ser usual
  usar más de 2.
`widths`::
  Array que define el ancho de cada etiqueta y el campo de cada columna.
`includes`::
  Matriz de archivos JavaScript adicionales a incluir. Es muy útil para añadir
  comportamiento definido por JS a la página.

=== panels
La entrada de paneles define el layout actual del Detail (o Edit) view.
Cada entrada es un nuevo panel en la vista, siendo el label (etiqueta-nombre)
de cada panel su key correspondiente. En el ejemplo anterior se pueden ver
2 panels. Uno usa el label definido por el string de lenguaje `LBL_ABC_VEHICLES_INFO`
y el otro, `LBL_PANEL_ADVANCED`.

Cada panel se compone por una matriz donde cada entrada representa una fila nueva
del panel. Así mismo, cada una de esas entradas puede ser a su vez un arreglo cuyos
elementos representen columnas de la fila en cuestión. Un caso de la definición
dada podría ser:

.Ejemplo 6.3: Definición del metadata de un DetailView
[source,php]
----
array(
  array (
     'name' => 'nombre',
     'comment' => 'El nombre del vehículo',
     'label' => 'LBL_NAME',
  ),
  'reg_number',
),
----

Éste bloque es el array definido para la primera fila del primer ejemplo. La misma se
compone por un array para la 'primera fila - primera columna' y un string para la
'primera fila - segunda columna'. La definición de la segunda columna es
sencilla: simplemente muestra un detail (o edit, según se corresponda con
la vista) para aquel campo. Usará label, tipo y demás atributos por defecto, y, en este
caso, mostrará el valor que contenga el campo  `reg_number`.

La definición del array para la 'primera fila - primera columna' es un poco más compleja:
Cada definición de matriz debe tener un valor `name`. En éste caso mostrará el campo `nombre`.
Sin embargo, también se pueden definir otros parámetros; los más comunmente usados son:

`comment`::
  Usado como comentario de referencia del propósito del campo.
`label`::
  La Key de lenguaje para ésta etiqueta. Si la Key del lenguaje no fuera reconocida,
  éste será el valor a usar (para más datos, ver link:../language-strings#language-chapter[chapter on language]).
`displayParams`::
  Un array a ser usado para pasar argumentos extra necesarios que determinan la
  configuración del campo. Para las opciones existentes y su uso, se recomienda
  revisar los tipos de campos que figuran en `include/SugarFields/Fields` o
  `custom/include/SugarFields/Fields`. Un ejemplo podría ser el seteo del tamaño de un
  área de texto (textarea):

.Example 6.4: Uso de displayParams en metadata de un DetailView
[source,php]
----
'displayParams' => array(
    'rows' => 2,
    'cols' => 30,
),
----

`customCode`::
  Permite proporcionar codigo smarty personalizado para ser usado por el display
  al momento de la renderización. El bloque de código puede incluir cualquier
  código smarty válido; éste además cuenta acceso a todos los campos de la
  correspondiente vista mediante el uso del mensaje `$fields`. Por ejemplo, para imprimir
  en pantalla el campo ID, el código a usar puede ser `{$fields.id.value}`. Adicionalmente,
  las etiquetas de módulo y de aplicaciones pueden accederse via `$MOD` y `$APP`,
  respectivamente. Finalmente, se puede usar `@@FIELD@@` para mostrar los valores del
  campo que se desee imprimir en pantalla. Por ejemplo, `{if $someCondition}@@FIELD@@{/if}`
  va a mostrar el campo que deseemos siempre que se cumpla el condicional.

=== editviewdefs.php

`editviewdefs.php` provee información sobre el diseño y los campos de la vista de
edición para éste módulo. Éste archivo usa la misma estructura que Detail View Defs,
por lo que si se desea más información, por favor, referirse al punto anterior donde
se analiza detailviewdefs.php.

=== listviewdefs.php

El archivo `listviewdefs.php` de un módulo define la lista de campos que éste
módulo va a mostrar. Por ejemplo:

.Ejemplo 6.5: Definición de la metadata de ListView
[source,php]
----
$listViewDefs ['AOR_Reports'] =
array (
  'NAME' =>
  array (
    'width' => '15%',
    'label' => 'LBL_NAME',
    'default' => true,
    'link' => true,
  ),
  'REPORT_MODULE' =>
  array (
    'type' => 'enum',
    'default' => true,
    'studio' => 'visible',
    'label' => 'LBL_REPORT_MODULE',
    'width' => '15%',
  ),
  'ASSIGNED_USER_NAME' =>
  array (
    'width' => '15%',
    'label' => 'LBL_ASSIGNED_TO_NAME',
    'module' => 'Employees',
    'id' => 'ASSIGNED_USER_ID',
    'default' => true,
  ),
  'DATE_ENTERED' =>
  array (
    'type' => 'datetime',
    'label' => 'LBL_DATE_ENTERED',
    'width' => '15%',
    'default' => true,
  ),
  'DATE_MODIFIED' =>
  array (
    'type' => 'datetime',
    'label' => 'LBL_DATE_MODIFIED',
    'width' => '15%',
   'default' => true,
  ),
);
----

Para definir la lista simplemente añadimos una clave al array `$listViewDefs`.
En éste caso, vamos a añadir una entrada para `AOR_Reports`. Éste array
contiene una entrada por cada campo que deseemos mostrar en el List View,
y tiene como key el nombre en mayúsculas del campo listado. Por ejemplo, la key
`REPORT_MODULE` refiere al campo `report_module` de AOR_Reports.

`type`::
  El tipo del campo. Puede ser usado para overridear (solapar el valor por defecto) cómo un campo es mostrado.
`default`::
  Determina si éste campo debe ser mostrado en el List View por defecto. Si
  es falso, entonces el campo aparecerá en la lista de columnas disponibles
  en Studio.
`studio`::
  Señala que el campo sea mostrado en Studio o no. Puede ser útil para
  asegurar que campos críticos no sean removidos.
`label`::
  La etiqueta a ser usada por éste campo. Si la misma no es declarada,
  se usará el nommbre por defecto del campo.
`width`::
  El ancho de la etiqueta en el List View. Debe considerarse que, aunque éste
  es usualmente expresado como porcentaje, es tratado como proporción. En el ejemplo
  previo, aunque está definido con un ancho de `15%`, como son 5 columnas, el mismo será
  de `20%`, a fin de respetar el 'ratio'' de proporción.

=== popupdefs.php

popupdefs.php proporciona información sobre el layout, campos y opciones de búsqueda
del módulo Pop-Up que es usado generalmente al seleccionar algún registro.

El popupdefs.php por defecto del módulo Accounts sería:

.Ejemplo 6.6: Definición de metadata del PopupView
[source,php]
----
$popupMeta = array(
  'moduleMain' => 'Case',
  'varName' => 'CASE',
  'className' => 'aCase',
  'orderBy' => 'name',
  'whereClauses' =>
      array('name' => 'cases.name',
              'case_number' => 'cases.case_number',
              'account_name' => 'accounts.name'),
  'listviewdefs' => array(
      'CASE_NUMBER' => array(
          'width' => '5',
          'label' => 'LBL_LIST_NUMBER',
          'default' => true),
      'NAME' => array(
          'width' => '35',
          'label' => 'LBL_LIST_SUBJECT',
          'link' => true,
          'default' => true),
      'ACCOUNT_NAME' => array(
          'width' => '25',
          'label' => 'LBL_LIST_ACCOUNT_NAME',
          'module' => 'Accounts',
          'id' => 'ACCOUNT_ID',
          'link' => true,
          'default' => true,
          'ACLTag' => 'ACCOUNT',
          'related_fields' => array('account_id')),
      'PRIORITY' => array(
          'width' => '8',
          'label' => 'LBL_LIST_PRIORITY',
          'default' => true),
      'STATUS' => array(
          'width' => '8',
          'label' => 'LBL_LIST_STATUS',
          'default' => true),
      'ASSIGNED_USER_NAME' => array(
          'width' => '2',
          'label' => 'LBL_LIST_ASSIGNED_USER',
          'default' => true,
         ),
      ),
  'searchdefs'   => array(
      'case_number',
      'name',
      array(
          'name' => 'account_name',
          'displayParams' => array(
              'hideButtons'=>'true',
              'size'=>30,
              'class'=>'sqsEnabled sqsNoAutofill'
          )
      ),
      'priority',
      'status',
      array(
          'name' => 'assigned_user_id',
          'type' => 'enum',
          'label' => 'LBL_ASSIGNED_TO',
          'function' => array(
              'name' => 'get_user_array',
              'params' => array(false))
          ),
    )
);
----


El popupdefs.php especifica un array `$popupMeta` con las siguientes llaves:

`moduleMain`::
  El módulo que será mostrado en éste popup.
`varName`::
  El nombre de la variable usada para almacenar las preferencias de búsquedas, etc.
  Generalmente, será simplemente el nombre del módulo en mayúscula.
`className`::
  El nombre de la clase del módulo SugarBean. Si éste no es definido, entonces
  será usado `moduleMain`. Éste es unicamente requerido para clases donde el nombre
  de la clase y el módulo difieren (como en el caso de Cases).
`orderBy`::
  El campo por el que será ordenada la lista de registros por defecto.
`whereClauses`::
  Opción legacy. Solo es usada como una opción alternativa cuando no existe
  ningún searchdef. Define el nombre de los campos por los que permitir búsquedas
  y sus representaciones en la base de datos.
`listviewdefs`::
  La lista de campos mostrados en el list view del popup. Ver `listviewdefs.php`.
`searchdefs`::
  Un array de campos que deberían estar disponibles para buscar en el popup. Ver
  las definiciones de búsquedas individuales en la sección searchdefs.php (por
  ejemplo, el array `basic_search` ).

=== quickcreatedefs.php

`quickcreatedefs.php` provee información sobre el diseño y campos de la vista
Quick Create del módulo correspondiente (Quick View es la vista que aparece cuando se
crea un registro desde un subpanel). Éste archivo usa el mismo tipo de estructura que
`detailviewdefs.php`. Para más información, se puede ver la referencia a `detailviewdefs.php`

=== searchdefs.php

El searchdef de un módulo define cómo se vé y se comporta la búsqueda dentro de
un módulo.

Un ejemplo:

.Ejemplo 6.7: Definición de metadata de Search View
[source,php]
----
$searchdefs ['Accounts'] = array (
     'templateMeta' => array (
         'maxColumns' => '3',
         'maxColumnsBasic' => '4',
         'widths' => array (
             'label' => '10',
             'field' => '30'
         )
     ),
     'layout' => array (
         'basic_search' => array (
             'name' => array (
                 'name' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'current_user_only' => array (
                 'name' => 'current_user_only',
                 'label' => 'LBL_CURRENT_USER_FILTER',
                 'type' => 'bool',
                 'default' => true,
                 'width' => '10%'
             )
         )
         ,
         'advanced_search' => array (
             'name' => array (
                 'name' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'website' => array (
                 'name' => 'website',
                 'default' => true,
                 'width' => '10%'
             ),
             'phone' => array (
                 'name' => 'phone',
                 'label' => 'LBL_ANY_PHONE',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'email' => array (
                 'name' => 'email',
                 'label' => 'LBL_ANY_EMAIL',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'address_street' => array (
                 'name' => 'address_street',
                 'label' => 'LBL_ANY_ADDRESS',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'address_city' => array (
                 'name' => 'address_city',
                 'label' => 'LBL_CITY',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'address_state' => array (
                 'name' => 'address_state',
                 'label' => 'LBL_STATE',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'address_postalcode' => array (
                 'name' => 'address_postalcode',
                 'label' => 'LBL_POSTAL_CODE',
                 'type' => 'name',
                 'default' => true,
                 'width' => '10%'
             ),
             'billing_address_country' => array (
                 'name' => 'billing_address_country',
                 'label' => 'LBL_COUNTRY',
                 'type' => 'name',
                 'options' => 'countries_dom',
                 'default' => true,
                 'width' => '10%'
             ),
             'account_type' => array (
                 'name' => 'account_type',
                 'default' => true,
                 'width' => '10%'
             ),
             'industry' => array (
                 'name' => 'industry',
                 'default' => true,
                 'width' => '10%'
             ),
             'assigned_user_id' => array (
                 'name' => 'assigned_user_id',
                 'type' => 'enum',
                 'label' => 'LBL_ASSIGNED_TO',
                 'function' => array (
                     'name' => 'get_user_array',
                     'params' => array (
                        0 => false
                     )
                 ),
                 'default' => true,
                 'width' => '10%'
            )
        )
    )
);
----

En el ejemplo se setea un nuevo array para Accounts en el array `$searchdef`.
Éste cuenta con dos llaves:

`templateMeta` ::
`templateMeta` es la llave que controla el aspecto básico del formulario de búsqueda.
En éste se toman definiciones generales del layout tales como el máximo de columnas (3)
y el máximo número de columnas (4) para una búsqueda general. Finalmente, se setean los
anchos para los campos de búsqueda y sus etiquetas.

`layout` ::
El parámetro `layout` va a tener las definiciones de diseño para tanto búsquedas
básicas como avanzadas. Ésta es simplemente una lista de 'array definitions'
(definiciones en forma de arrays) de sus campos. Ver la sección listviewdefs.php para
una descripción de algunas de sus opciones.

=== subpaneldefs.php

El archivo subpaneldefs.php provee definiciones para el subpanel que se
generará en la vista de detalles de un módulo. Por ejemplo:

.Ejemplo 6.8: Definición de metadata de un Subpanel
[source,php]
----
$layout_defs['AOS_Quotes'] = array (
  'subpanel_setup' => array (
      'aos_quotes_aos_contracts' => array (
          'order' => 100,
          'module' => 'AOS_Contracts',
          'subpanel_name' => 'default',
          'sort_order' => 'asc',
          'sort_by' => 'id',
          'title_key' => 'AOS_Contracts',
          'get_subpanel_data' => 'aos_quotes_aos_contracts',
          'top_buttons' => array (
              0 => array (
                  'widget_class' => 'SubPanelTopCreateButton'
              ),
              1 => array (
                  'widget_class' => 'SubPanelTopSelectButton',
                  'popup_module' => 'AOS_Contracts',
                  'mode' => 'MultiSelect'
              )
          )
      ),
      'aos_quotes_aos_invoices' => array (
          'order' => 100,
          'module' => 'AOS_Invoices',
          'subpanel_name' => 'default',
          'sort_order' => 'asc',
          'sort_by' => 'id',
          'title_key' => 'AOS_Invoices',
          'get_subpanel_data' => 'aos_quotes_aos_invoices',
          'top_buttons' => array (
              0 => array (
                  'widget_class' => 'SubPanelTopCreateButton'
              ),
              1 => array (
                  'widget_class' => 'SubPanelTopSelectButton',
                  'popup_module' => 'AOS_Invoices',
                  'mode' => 'MultiSelect'
              )
          )
      ),
      'aos_quotes_project' => array (
          'order' => 100,
          'module' => 'Project',
          'subpanel_name' => 'default',
          'sort_order' => 'asc',
          'sort_by' => 'id',
          'title_key' => 'Project',
          'get_subpanel_data' => 'aos_quotes_project',
          'top_buttons' => array (
              0 => array (
                  'widget_class' => 'SubPanelTopCreateButton'
              ),
              1 => array (
                  'widget_class' => 'SubPanelTopSelectButton',
                  'popup_module' => 'Accounts',
                  'mode' => 'MultiSelect'
              )
          )
      )
   )
);
----

En el ejemplo superior se puede ver la definición de un módulo (en éste
caso `AOS_Quotes`) en el array `$layout_defs`. Éste tiene un único key
`subpanel_setup` el cual está en un array donde cada definición de subpanel
que usa un nombre como key. El nombre debe ser identificable (se recomienda
sea expresivo). En el ejemplo previo, el nombre es el del campo linkeado mostrado
por el subpanel. A su vez, la entrada por cada subpanel suele tener definido:

`order`::
  Un número usado para ordenar los subpaneles. Los valores en sí mismos son
  abitrarios y solo son usados en relación con otros subpaneles.
`module`::
  El módulo que será mostrado por éste subpanel. Por ejemplo, el def de
  `aos_quotes_project` en el ejemplo superior va a mostrar una lista de
  registros de `Project`.
`subpanel_name`::
  El subpanel de módulo mostrado que será usado. Para más referencias,
  remítase a la sección subpanels de éste capítulo.
`sort_by`::
  El campo sobre el que ordenar los registros.
`sort_order`::
  El orden aplicado al campo `sort_by`. `asc` para ascendente, `desc` para
  descendente.
`title_key`::
  La key de lenguaje a ser usada por la etiqueta del subpanel en cuestión.
`get_subpanel_data`::
  Usado para especificar dónde se deben consultar los registros del
  subpanel. Por lo general es solo un nombre de enlace para el
  módulo actual. En este caso, los registros relacionados que se mostrarán
  en el subpanel. Sin embargo, para links más complejos, es posible especificar
  una función a la que llamar; cuando ésto sucede, se debe asegurar que
  `get_subpanel_data` tenga la forma de `function:theFunctionName`.
  Adicionalmente, se puede especificar la locación de la función y cualquier
  parámetro adicional que sea necesario mediante el uso del
  mensaje `function_parameters`. Si se desea ver un ejemplo de un
  subpanel que usa una función, puede referirse al siguiente link: link:../appendix-a---code-examples#appendix-a[Appendix
  A].
`function_parameters`::
  Especifica los parámetros para un subpanel que obtiene su información
  desde una función (ver +
  `get_subpanel_data`). Éste es un array que permite especificar la
  ubicación de la función usando el mensaje `import_function_file` (y que,
  en caso de que esté ausente pero `get_subpanel_data` refiera a una función,
  la llamada será redirigida  al bean del Parent del subpanel).
  Adicionalmente, éste array será pasado como un argumento en la función
  definida en `get_subpanel_data`, lo que permitirá pasar argumentos a la
  función.
`generate_select`::
  Para los subpaneles con funciones (ver `get_subpanel_data`), define si
  la función retornara un array (si `generate_select = true`)
  o simplemente el string con la consulta (query) usada.
`get_distinct_data`::
  Define si solo se retornan filas distintas. Las relaciones no permiten
  vincular dos registros más de una vez, por lo tanto, ésta opción solo
  aplica si la fuente del subpanel es una función. Ver+
  `get_subpanel_data` para más datos sobre funciones como sources de subpaneles.
`top_buttons`::
  Permite declarar los botones que aparecen en el subpanel como
  un array con la definición de los mismos. Éstas definiciones tienen,
  como mínimo, un `widget_class` que determina qué Clase de botones usar
  en `include/generic/SugarWidgets`. Dependiendo del botón, éste array
  puede incluso ser usada para pasar argumentos extra al widget class.

=== subpanels

Dentro de la carpeta metadata está el directorio `subpanels`. Éste permite
crear diferentes diseños de subpaneles para diferentes módulos padres (parents).
Por ejemplo, el módulo Contacts se podría ver distinto en el subpanel de Account
comparado con el subpanel de un Case. Los archivos dentro de la carpeta
`subpanels` pueden ser llamados de forma totalmente arbitraria: todo lo que importa
es que puedan ser referenciados en el `subpanel_name` de `subpanelsdefs.php` del
módulo Parent. Por lo general, el archivo es simplemente llamado `default.php`.
Analizando `modules/Accounts/metadata/subpanels/default.php`:

.Ejemplo 6.8: Definición del módule Subpanels.
[source,php]
----
$subpanel_layout = array(
  'top_buttons' => array(
      array(
          'widget_class' => 'SubPanelTopCreateButton'
      ),
      array(
          'widget_class' => 'SubPanelTopSelectButton',
          'popup_module' => 'Accounts'
      ),
  ),
  'where' => '',
  'list_fields' => array (
    'name' =>
    array (
     'vname' => 'LBL_LIST_ACCOUNT_NAME',
     'widget_class' => 'SubPanelDetailViewLink',
     'width' => '45%',
     'default' => true,
    ),
    'billing_address_city' =>
    array (
      'vname' => 'LBL_LIST_CITY',
      'width' => '20%',
      'default' => true,
    ),
    'billing_address_country' =>
    array (
      'type' => 'varchar',
      'vname' => 'LBL_BILLING_ADDRESS_COUNTRY',
      'width' => '7%',
      'default' => true,
    ),
    'phone_office' =>
    array (
      'vname' => 'LBL_LIST_PHONE',
      'width' => '20%',
      'default' => true,
    ),
    'edit_button' =>
    array (
      'vname' => 'LBL_EDIT_BUTTON',
      'widget_class' => 'SubPanelEditButton',
      'width' => '4%',
      'default' => true,
    ),
    'remove_button' =>
    array (
      'vname' => 'LBL_REMOVE',
      'widget_class' => 'SubPanelRemoveButtonAccount',
      'width' => '4%',
      'default' => true,
    ),
  )
);
----

Hay tres keys en la variable `$subpanel_layout` de éste subpanel:

`top_buttons`::
  Define los botones que aparecerán en la cabecera del subpanel. Ver
  la opción `top_buttons` en `subpaneldefs.php`.
`where`::
  Permite la inclusión de condiciones como la cláusula `where` de la consulta (query).
  Por ejemplo, para permitir excluir Cases que están cerrados se puede usar
  `cases.state != "Closed"`, o si se desea incluir Accounts de una
  industria específica, se puede usar `accounts.industry = "Media"`.
  Nótese que en los ejemplos se especifica la tabla antes de llamar al
  campo para eliminar cualquier tipo de ambigüedad en la query.
`list_fields`::
  Define la lista de campos a ser mostrados por éste subpanel. Ver la
  sección on `listviewdefs.php` para más información

=== studio.php

studio.php es el archivo más simple en metadata y su únicamente es usado
para confirmar si un módulo debe ser mostrado en studio para que el usuario
realice ajustes sobre él. A diferencia de otros archivos de metadata, el
archivo en `modules/<TheModule>/metadata/studio.php` será el único
validado por Suite; un archivo en `custom/modules/<TheModule>/metadata/studio.php`
no tendrá ningún tipo de efecto. link:../metadata[↩]
