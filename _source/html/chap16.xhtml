<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>17. Best Practices</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<div>
<h2 id="leanpub-auto-best-practices">
<span class="section-number">17. </span>Best Practices</h2>

<h3 id="leanpub-auto-development-instances">Development instances</h3>
<p>When making changes you should always use a development or test instance first.
This allows you to fully and safely test any changes.</p>

<h3 id="leanpub-auto-version-control">Version control</h3>
<p>When developing customisations it is prudent to use some form of version control.
Version control allows tracking changes to your codebase in addition to rolling back changes.
There are many version control systems available. SuiteCRM uses 
<a href="http://git-scm.com/">Git</a> although I also like <a href="http://mercurial.selenic.com/">Mercurial</a>.</p>

<p>If you are using a development instance (as mentioned above) then Version Control
usually allows you to push changes to other versions or to tag releases. This provides
a way of pushing changes to live or test instances safely. Crucially it also means
that, should there be major problems with a version then this can be easily rolled
back.</p>

<h3 id="leanpub-auto-backup">Backup</h3>
<p>SuiteCRM has been developed to be customisable. However, mistakes, bugs and other unpleasantness
can (and thanks to Murphy’s law, will) happen. You should always ensure, before
making any changes, that you have a backup of all files and of the database.</p>

<p>In order to back up files you can simply create a zip of the SuiteCRM directory and
copy it to a safe place. On Linux systems this can be performed using the following:</p>

<div class="code-block">
  <p class="codeblock-title">Example 17.1: File backup</p>

  <hr /><div class="highlight"><pre>tar -czvf suitecrmfilebackup.tar.gz /path/to/suitecrm
</pre></div>

  <hr /></div>

<p>Backing up the SuiteCRM database will vary depending on which database you are
using. However MySQL backups can be performed using the <code>mysqldump</code> command on Linux
as seen here:</p>

<div class="code-block">
  <p class="codeblock-title">Example 17.2: MySQL Database backup</p>

  <hr /><div class="highlight"><pre>mysqldump suitecrmdatabase -u databaseuser -p <code class="p">|</code> gzip -c <code class="p">|</code> cat &gt; suitecrm.sql.gz
</pre></div>

  <hr /></div>

<h3 id="leanpub-auto-be-upgrade-safe">Be upgrade safe</h3>
<p>Unless you are making changes to a custom module you should strive in all cases to use
the custom framework and make changes in the custom folder. This ensures that,
should you make a mistake, rectifying the mistake is as simple as removing the customisation.</p>

<p>However the main advantage to using <code>custom</code> is that, when you upgrade SuiteCRM
in the future you will not have your changes overwritten by the updated SuiteCRM
files. See the <a href="chap13.xhtml#extensions-chapter">Extensions</a> chapter for more information.</p>

<h3 id="leanpub-auto-use-appropriate-log-levels">Use appropriate log levels</h3>
<p>Using appropriate log levels (See the chapter on <a href="chap10.xhtml#logging-chapter">Logging</a>) 
makes it easier to track down issues. You do not want very important messages 
to be logged as <code>debug</code> since this will make them difficult to find. Likewise 
you don’t want unimportant log messages cluttering up the <code>fatal</code> log output.</p>

<h3 id="leanpub-auto-long-running-logic-hooks">Long running logic hooks</h3>
<p>If a logic hook task is long running then you should place it into the job queue (see the
<a href="chap11.xhtml#logic-hooks-chapter">Logic Hook</a> and <a href="chap12.xhtml#scheduled-tasks-chapter">Scheduled Tasks</a>
chapters).</p>

<h3 id="leanpub-auto-minimise-sql">Minimise SQL</h3>
<p>Where possible you should strive to use the SuiteCRM supplied methods of accessing
data. This includes using beans and the BeanFactory where possible (see the
chapter on <a href="chap02.xhtml#working-with-beans-chapter">Working with beans</a>). 
There are a few reasons for this. The first is that SQL is usually either hardcoded 
or has to be dynamically built. In the case
where the SQL is hardcoded this means that changes to fields will not be
reflected thereby making your code more brittle.</p>

<p>Dynamic SQL is better because it can react to field changes and generally be tailored
to fit the situation. However this requires adding extra, often complex, code. 
It can be hard to account for all situations (this can be especially problematic
when attempting to traverse relationships dynamically).</p>

<p>Another issue is that, usually SQL will end up being Database specific (see the
next point for mitigating this however).</p>

<p>Finally any custom logic (such as Logic Hooks) which would usually be fired for saving
 beans or relationships will not be fired for SQL
queries.</p>

<h3 id="leanpub-auto-sql-use">SQL Use</h3>
<p>In some cases using raw SQL is unavoidable. If that is the case then you should
strive to use standard compliant SQL. If database engine specific features need
to be used, and you wish to target other database engines, you can check for the
DB type. For example:</p>

<div class="code-block">
  <p class="codeblock-title">Example 17.1: Checking for the database engine</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="k">function</code> <code class="nf">getSomeSQLQuery</code><code class="p">(){</code>
<code class="lineno"> 2</code>     <code class="k">global</code> <code class="nv">$sugar_config</code><code class="p">;</code>
<code class="lineno"> 3</code>     <code class="k">switch</code><code class="p">(</code><code class="nv">$sugar_config</code><code class="p">[</code><code class="s1">'dbconfig'</code><code class="p">][</code><code class="s1">'db_type'</code><code class="p">]){</code>
<code class="lineno"> 4</code>         <code class="k">case</code> <code class="s1">'mssql'</code><code class="o">:</code>
<code class="lineno"> 5</code>             <code class="nv">$sql</code> <code class="o">=</code> <code class="s1">'MSSQL specific SQL'</code><code class="p">;</code>
<code class="lineno"> 6</code>             <code class="k">break</code><code class="p">;</code>
<code class="lineno"> 7</code>         <code class="k">case</code> <code class="s1">'mysql'</code><code class="o">:</code>
<code class="lineno"> 8</code>         <code class="k">default</code><code class="o">:</code>
<code class="lineno"> 9</code>             <code class="nv">$sql</code> <code class="o">=</code> <code class="s1">'MySQL specific SQL'</code><code class="p">;</code>
<code class="lineno">10</code>             <code class="k">break</code><code class="p">;</code>
<code class="lineno">11</code>     <code class="p">}</code>
<code class="lineno">12</code>     <code class="k">return</code> <code class="nv">$sql</code><code class="p">;</code>
<code class="lineno">13</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<h3 id="leanpub-auto-entry-check">Entry check</h3>
<p>The majority of SuiteCRM files will start with some variation of the
following line:</p>

<div class="code-block">
  <p class="codeblock-title">Example 17.2: Entry check</p>

  <hr /><div class="highlight"><pre><code class="k">if</code><code class="p">(</code><code class="o">!</code><code class="nb">defined</code><code class="p">(</code><code class="s1">'sugarEntry'</code><code class="p">)</code> <code class="o">||</code> <code class="o">!</code><code class="nx">sugarEntry</code><code class="p">)</code> <code class="k">die</code><code class="p">(</code><code class="s1">'Not A Valid Entry Point'</code><code class="p">);</code>
</pre></div>

  <hr /></div>

<p>This prevents direct access to the file by ensuring that SuiteCRM has been loaded
through a valid entry point (i.e. it has been loaded through index.php, cron.php
or a custom entry point).</p>

<h3 id="leanpub-auto-redirect-after-post">Redirect after post</h3>
<p>Sometimes you may have custom controller actions (see the controller section) or
custom entry points (see the <a href="chap07.xhtml#entry-point-chapter">Entry Points</a> chapter). 
These actions and entry points
or other pages are usually accessed using POST. After a POST request it is
a web best practice to redirect to a different page, especially if your page makes
any changes. This prevents the user from refreshing the page and causing a duplicate
action. Within SuiteCRM it is best to use the <code>SugarApplication::redirect</code> method
to redirect.
This simply accepts a URL. As follows:</p>

<div class="code-block">
  <p class="codeblock-title">Example 17.3: Redirecting within SuiteCRM</p>

  <hr /><div class="highlight"><pre><code class="nx">SugarApplication</code><code class="o">::</code><code class="na">redirect</code><code class="p">(</code><code class="s1">'index.php?module=&lt;TheModule&gt;'</code><code class="p">);</code>
</pre></div>

  <hr /></div>
</div>
</body>
</html>
