<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>16. API</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<div>
<h2 id="leanpub-auto-api">
<span class="section-number">16. </span>API</h2>

<p>The SuiteCRM API allows third party code to access and edit SuiteCRM data and
functionality.</p>

<h3 id="leanpub-auto-using-the-api">Using the API</h3>
<p>SuiteCRM has both a REST and a SOAP API. Which API you want to use will largely come down to personal
preference and the support for SOAP/REST libraries in whichever language you will
be using.</p>

<p>Both APIs will require a username and password. It is usual to create a user
specifically for the API.</p>

<h4 id="leanpub-auto-soap">SOAP</h4>
<p>The WSDL for the SOAP API can be found at:</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.1: SOAP API WSDL Location</p>

  <hr /><div class="highlight"><pre>example.com/suitecrm/service/v4_1/soap.php?wsdl
</pre></div>

  <hr /></div>
<p>Where <code>example.com/suitecrm</code> is the address of your SuiteCRM instance.
<code>v4_1</code> is the version of the API and can be changed, <code>v4_1</code> is the latest version at the
time of writing.</p>

<h5 id="leanpub-auto-soap-example">SOAP Example</h5>
<p>The following PHP example uses the built in SoapClient class.</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.2: Accessing the SOAP API</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> <code class="c1">//Create a new SoapClient</code>
<code class="lineno"> 3</code> <code class="nv">$wsdlURL</code> <code class="o">=</code> <code class="s2">"http://example.com/suitecrm/service/v4_1/soap.php?wsdl"</code><code class="p">;</code>
<code class="lineno"> 4</code> <code class="nv">$client</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">SoapClient</code><code class="p">(</code><code class="nv">$wsdlURL</code><code class="p">);</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="c1">//Login to the API and get the session id</code>
<code class="lineno"> 7</code> <code class="nv">$userAuth</code> <code class="o">=</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno"> 8</code>         <code class="s1">'user_name'</code> <code class="o">=&gt;</code> <code class="s1">'&lt;suitecrmuser&gt;'</code><code class="p">,</code>
<code class="lineno"> 9</code>         <code class="s1">'password'</code> <code class="o">=&gt;</code> <code class="nb">md5</code><code class="p">(</code><code class="s1">'&lt;suitecrmpassword&gt;'</code><code class="p">),</code>
<code class="lineno">10</code> <code class="p">);</code>
<code class="lineno">11</code> <code class="nv">$appName</code> <code class="o">=</code> <code class="s1">'My SuiteCRM SOAP Client'</code><code class="p">;</code>
<code class="lineno">12</code> <code class="nv">$nameValueList</code> <code class="o">=</code> <code class="k">array</code><code class="p">();</code>
<code class="lineno">13</code> <code class="nv">$loginResults</code> <code class="o">=</code> <code class="nv">$client</code><code class="o">-&gt;</code><code class="na">login</code><code class="p">(</code><code class="nv">$userAuth</code><code class="p">,</code> <code class="nv">$appName</code><code class="p">,</code> <code class="nv">$nameValueList</code><code class="p">);</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="c1">//Get a list of at most 10 accounts with a billing address in Ohio. Along with</code>
<code class="lineno">16</code> <code class="c1">//The first and last names of any contacts in that Account.</code>
<code class="lineno">17</code> <code class="nv">$results</code> <code class="o">=</code> <code class="nv">$client</code><code class="o">-&gt;</code><code class="na">get_entry_list</code><code class="p">(</code>
<code class="lineno">18</code>         <code class="c1">//Session id - retrieved from login call</code>
<code class="lineno">19</code>         <code class="nv">$loginResults</code><code class="o">-&gt;</code><code class="na">id</code><code class="p">,</code>
<code class="lineno">20</code>         <code class="c1">//Module to get_entry_list for</code>
<code class="lineno">21</code>         <code class="s1">'Accounts'</code><code class="p">,</code>
<code class="lineno">22</code>         <code class="c1">//Filter query - Added to the SQL where clause</code>
<code class="lineno">23</code>         <code class="s2">"accounts.billing_address_city = 'Ohio'"</code><code class="p">,</code>
<code class="lineno">24</code>         <code class="c1">//Order by - unused</code>
<code class="lineno">25</code>         <code class="s1">''</code><code class="p">,</code>
<code class="lineno">26</code>         <code class="c1">//Start with the first record</code>
<code class="lineno">27</code>         <code class="mi">0</code><code class="p">,</code>
<code class="lineno">28</code>         <code class="c1">//Return the id and name fields</code>
<code class="lineno">29</code>         <code class="k">array</code><code class="p">(</code><code class="s1">'id'</code><code class="p">,</code><code class="s1">'name'</code><code class="p">),</code>
<code class="lineno">30</code>         <code class="c1">//Link to the "contacts" relationship and retrieve the</code>
<code class="lineno">31</code>         <code class="c1">//First and last names.</code>
<code class="lineno">32</code>         <code class="k">array</code><code class="p">(</code>
<code class="lineno">33</code>                 <code class="k">array</code><code class="p">(</code>
<code class="lineno">34</code>                         <code class="s1">'name'</code> <code class="o">=&gt;</code> <code class="s1">'contacts'</code><code class="p">,</code>
<code class="lineno">35</code>                         <code class="s1">'value'</code> <code class="o">=&gt;</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">36</code>                                 <code class="s1">'first_name'</code><code class="p">,</code>
<code class="lineno">37</code>                                 <code class="s1">'last_name'</code><code class="p">,</code>
<code class="lineno">38</code>                         <code class="p">),</code>
<code class="lineno">39</code>                 <code class="p">),</code>
<code class="lineno">40</code>         <code class="p">),</code>
<code class="lineno">41</code>         <code class="c1">//Show 10 max results</code>
<code class="lineno">42</code>         <code class="mi">10</code><code class="p">,</code>
<code class="lineno">43</code>         <code class="c1">//Do not show deleted</code>
<code class="lineno">44</code>         <code class="mi">0</code>
<code class="lineno">45</code> <code class="p">);</code>
<code class="lineno">46</code> <code class="nb">print_r</code><code class="p">(</code><code class="nv">$results</code><code class="p">);</code>
</pre></div>

  <hr /></div>

<div class="page-break"></div>
<h4 id="leanpub-auto-rest">REST</h4>

<p>The SuiteCRM REST API can be found at:</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.3: REST API Endpoint Location</p>

  <hr /><div class="highlight"><pre>example.com/suitecrm/service/v4_1/rest.php
</pre></div>

  <hr /></div>

<p>Where example.com/suitecrm is the address of your SuiteCRM instance.
v4_1 is the version of the API and can be changed, v4_1 is the latest version at the
time of writing.</p>

<p>The SuiteCRM REST API is not a true REST API - all calls are performed as POSTs
and all calls are to the base URL with the method passed in as a post argument.</p>

<dl><dt>The arguments to the REST API calls are:</dt>
  <dt>method</dt>
  <dd>The method which will be called, i.e. <code>login</code> or <code>get_entry_list</code>. See <a href="chap20.xhtml#appendix-b">Appendix B</a> for
a list of API methods.</dd>
  <dt>input_type</dt>
  <dd>The input type of the rest_data. This is usually <code>JSON</code> but can also be <code>Serialize</code>.</dd>
  <dt>response_type</dt>
  <dd>How the response will be encoded. This is usually <code>JSON</code> but can also be <code>Serialize</code>.</dd>
  <dt>rest_data</dt>
  <dd>Any other arguments that are required by this method. This is passed as an encoded array. The encoding
is determined by input_type.</dd>
</dl><table class="warning sidebarish">
  <tbody>
    <tr><td class="sidebar-icon">
      <img class="sidebar-image" src="images/leanpub_warning.png" alt="warning" width="50px" /></td>
    <td>
      <p>Note that, for REST requests it is the order of the arguments that matter in <code>rest_data</code>
and not the name.</p>

    </td>
  </tr>
  </tbody>
</table><div class="page-break"></div>
<h5 id="leanpub-auto-examples">Examples</h5>

<div class="code-block">
  <p class="codeblock-title">Example 16.4: Accessing the REST API</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> 
<code class="lineno"> 3</code> <code class="nv">$url</code> <code class="o">=</code> <code class="s2">"http://example.com/suitecrm/service/v4_1/rest.php"</code><code class="p">;</code>
<code class="lineno"> 4</code> 
<code class="lineno"> 5</code> <code class="k">function</code> <code class="nf">restRequest</code><code class="p">(</code><code class="nv">$method</code><code class="p">,</code> <code class="nv">$arguments</code><code class="p">){</code>
<code class="lineno"> 6</code> 	<code class="k">global</code> <code class="nv">$url</code><code class="p">;</code>
<code class="lineno"> 7</code> 	<code class="nv">$curl</code> <code class="o">=</code> <code class="nb">curl_init</code><code class="p">(</code><code class="nv">$url</code><code class="p">);</code>
<code class="lineno"> 8</code> 	<code class="nb">curl_setopt</code><code class="p">(</code><code class="nv">$curl</code><code class="p">,</code> <code class="nx">CURLOPT_RETURNTRANSFER</code><code class="p">,</code> <code class="mi">1</code><code class="p">);</code>
<code class="lineno"> 9</code> 	<code class="nv">$post</code> <code class="o">=</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">10</code> 			<code class="s2">"method"</code> <code class="o">=&gt;</code> <code class="nv">$method</code><code class="p">,</code>
<code class="lineno">11</code> 			<code class="s2">"input_type"</code> <code class="o">=&gt;</code> <code class="s2">"JSON"</code><code class="p">,</code>
<code class="lineno">12</code> 			<code class="s2">"response_type"</code> <code class="o">=&gt;</code> <code class="s2">"JSON"</code><code class="p">,</code>
<code class="lineno">13</code> 			<code class="s2">"rest_data"</code> <code class="o">=&gt;</code> <code class="nb">json_encode</code><code class="p">(</code><code class="nv">$arguments</code><code class="p">),</code>
<code class="lineno">14</code> 	<code class="p">);</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> 	<code class="nb">curl_setopt</code><code class="p">(</code><code class="nv">$curl</code><code class="p">,</code> <code class="nx">CURLOPT_POSTFIELDS</code><code class="p">,</code> <code class="nv">$post</code><code class="p">);</code>
<code class="lineno">17</code> 
<code class="lineno">18</code> 	<code class="nv">$result</code> <code class="o">=</code> <code class="nb">curl_exec</code><code class="p">(</code><code class="nv">$curl</code><code class="p">);</code>
<code class="lineno">19</code> 	<code class="nb">curl_close</code><code class="p">(</code><code class="nv">$curl</code><code class="p">);</code>
<code class="lineno">20</code> 	<code class="k">return</code> <code class="nb">json_decode</code><code class="p">(</code><code class="nv">$result</code><code class="p">,</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno">21</code> <code class="p">}</code>
<code class="lineno">22</code> 
<code class="lineno">23</code> 
<code class="lineno">24</code> <code class="nv">$userAuth</code> <code class="o">=</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">25</code>         <code class="s1">'user_name'</code> <code class="o">=&gt;</code> <code class="s1">'suitecrmuser'</code><code class="p">,</code>
<code class="lineno">26</code>         <code class="s1">'password'</code> <code class="o">=&gt;</code> <code class="nb">md5</code><code class="p">(</code><code class="s1">'suitecrmpassword'</code><code class="p">),</code>
<code class="lineno">27</code> <code class="p">);</code>
<code class="lineno">28</code> <code class="nv">$appName</code> <code class="o">=</code> <code class="s1">'My SuiteCRM REST Client'</code><code class="p">;</code>
<code class="lineno">29</code> <code class="nv">$nameValueList</code> <code class="o">=</code> <code class="k">array</code><code class="p">();</code>
<code class="lineno">30</code> 
<code class="lineno">31</code> <code class="nv">$args</code> <code class="o">=</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">32</code>             <code class="s1">'user_auth'</code> <code class="o">=&gt;</code> <code class="nv">$userAuth</code><code class="p">,</code>
<code class="lineno">33</code>             <code class="s1">'application_name'</code> <code class="o">=&gt;</code> <code class="nv">$appName</code><code class="p">,</code>
<code class="lineno">34</code>             <code class="s1">'name_value_list'</code> <code class="o">=&gt;</code> <code class="nv">$nameValueList</code><code class="p">);</code>
<code class="lineno">35</code> 
<code class="lineno">36</code> <code class="nv">$result</code> <code class="o">=</code> <code class="nx">restRequest</code><code class="p">(</code><code class="s1">'login'</code><code class="p">,</code><code class="nv">$args</code><code class="p">);</code>
<code class="lineno">37</code> <code class="nv">$sessId</code> <code class="o">=</code> <code class="nv">$result</code><code class="p">[</code><code class="s1">'id'</code><code class="p">];</code>
<code class="lineno">38</code> 
<code class="lineno">39</code> <code class="nv">$entryArgs</code> <code class="o">=</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">40</code>   <code class="c1">//Session id - retrieved from login call</code>
<code class="lineno">41</code> 	<code class="s1">'session'</code> <code class="o">=&gt;</code> <code class="nv">$sessId</code><code class="p">,</code>
<code class="lineno">42</code>   <code class="c1">//Module to get_entry_list for</code>
<code class="lineno">43</code> 	<code class="s1">'module_name'</code> <code class="o">=&gt;</code> <code class="s1">'Accounts'</code><code class="p">,</code>
<code class="lineno">44</code>   <code class="c1">//Filter query - Added to the SQL where clause,</code>
<code class="lineno">45</code> 	<code class="s1">'query'</code> <code class="o">=&gt;</code> <code class="s2">"accounts.billing_address_city = 'Ohio'"</code><code class="p">,</code>
<code class="lineno">46</code>   <code class="c1">//Order by - unused</code>
<code class="lineno">47</code> 	<code class="s1">'order_by'</code> <code class="o">=&gt;</code> <code class="s1">''</code><code class="p">,</code>
<code class="lineno">48</code>   <code class="c1">//Start with the first record</code>
<code class="lineno">49</code> 	<code class="s1">'offset'</code> <code class="o">=&gt;</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno">50</code>   <code class="c1">//Return the id and name fields</code>
<code class="lineno">51</code> 	<code class="s1">'select_fields'</code> <code class="o">=&gt;</code> <code class="k">array</code><code class="p">(</code><code class="s1">'id'</code><code class="p">,</code><code class="s1">'name'</code><code class="p">,),</code>
<code class="lineno">52</code> 	<code class="c1">//Link to the "contacts" relationship and retrieve the</code>
<code class="lineno">53</code> 	<code class="c1">//First and last names.</code>
<code class="lineno">54</code> 	<code class="s1">'link_name_to_fields_array'</code> <code class="o">=&gt;</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">55</code> 			<code class="k">array</code><code class="p">(</code>
<code class="lineno">56</code> 					<code class="s1">'name'</code> <code class="o">=&gt;</code> <code class="s1">'contacts'</code><code class="p">,</code>
<code class="lineno">57</code> 					<code class="s1">'value'</code> <code class="o">=&gt;</code> <code class="k">array</code><code class="p">(</code>
<code class="lineno">58</code> 							<code class="s1">'first_name'</code><code class="p">,</code>
<code class="lineno">59</code> 							<code class="s1">'last_name'</code><code class="p">,</code>
<code class="lineno">60</code> 					<code class="p">),</code>
<code class="lineno">61</code> 			<code class="p">),</code>
<code class="lineno">62</code> 	<code class="p">),</code>
<code class="lineno">63</code>   <code class="c1">//Show 10 max results</code>
<code class="lineno">64</code> 	<code class="s1">'max_results'</code> <code class="o">=&gt;</code> <code class="mi">10</code><code class="p">,</code>
<code class="lineno">65</code>   <code class="c1">//Do not show deleted</code>
<code class="lineno">66</code> 	<code class="s1">'deleted'</code> <code class="o">=&gt;</code> <code class="mi">0</code><code class="p">,</code>
<code class="lineno">67</code> <code class="p">);</code>
<code class="lineno">68</code> <code class="nv">$result</code> <code class="o">=</code> <code class="nx">restRequest</code><code class="p">(</code><code class="s1">'get_entry_list'</code><code class="p">,</code><code class="nv">$entryArgs</code><code class="p">);</code>
<code class="lineno">69</code> 
<code class="lineno">70</code> <code class="nb">print_r</code><code class="p">(</code><code class="nv">$result</code><code class="p">);</code>
</pre></div>

  <hr /></div>

<p>For a full list of API methods and their arguments see <a href="chap20.xhtml#appendix-b">Appendix B</a>.</p>

<h3 id="leanpub-auto-adding-custom-api-methods">Adding custom API methods</h3>

<p>Sometimes the existing API methods are not sufficient or using them for a task
would be overly complex. SuiteCRM allows the web services to be extended with
additional methods or overriding existing methods.</p>

<p>The recommended path for custom entry points is the following<br /><code>custom/service/&lt;version&gt;_custom/</code>. At the time of writing the latest
web service version is <code>v4_1</code> so this would be <code>custom/service/v4_1_custom/</code>.</p>

<p>Next we create the implementing class. This will create our new method.
In our example we will simply create a new method which writes to the SuiteCRM
log We will call this method<br /><code>write_log_message</code>.</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.5: Custom v4_1 Web Service Implementation</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> <code class="k">if</code><code class="p">(</code><code class="o">!</code><code class="nb">defined</code><code class="p">(</code><code class="s1">'sugarEntry'</code><code class="p">)){</code>
<code class="lineno"> 3</code>   <code class="nb">define</code><code class="p">(</code><code class="s1">'sugarEntry'</code><code class="p">,</code> <code class="k">true</code><code class="p">);</code>
<code class="lineno"> 4</code> <code class="p">}</code>
<code class="lineno"> 5</code> <code class="k">require_once</code> <code class="s1">'service/v4_1/SugarWebServiceImplv4_1.php'</code><code class="p">;</code>
<code class="lineno"> 6</code> <code class="k">class</code> <code class="nc">SugarWebServiceImplv4_1_custom</code> <code class="k">extends</code> <code class="nx">SugarWebServiceImplv4_1</code>
<code class="lineno"> 7</code> <code class="p">{</code>
<code class="lineno"> 8</code> 
<code class="lineno"> 9</code>   <code class="k">function</code> <code class="nf">write_log_message</code><code class="p">(</code><code class="nv">$session</code><code class="p">,</code> <code class="nv">$message</code><code class="p">)</code>
<code class="lineno">10</code>   <code class="p">{</code>
<code class="lineno">11</code>     <code class="nv">$GLOBALS</code><code class="p">[</code><code class="s1">'log'</code><code class="p">]</code><code class="o">-&gt;</code><code class="na">info</code><code class="p">(</code><code class="s1">'Begin: write_log_message'</code><code class="p">);</code>
<code class="lineno">12</code> 
<code class="lineno">13</code>     <code class="c1">//Here we check that $session represents a valid session</code>
<code class="lineno">14</code>     <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">self</code><code class="o">::</code><code class="nv">$helperObject</code><code class="o">-&gt;</code><code class="na">checkSessionAndModuleAccess</code><code class="p">(</code>
<code class="lineno">15</code>                                                     <code class="nv">$session</code><code class="p">,</code> 
<code class="lineno">16</code>                                                     <code class="s1">'invalid_session'</code><code class="p">,</code> 
<code class="lineno">17</code>                                                     <code class="s1">''</code><code class="p">,</code> 
<code class="lineno">18</code>                                                     <code class="s1">''</code><code class="p">,</code> 
<code class="lineno">19</code>                                                     <code class="s1">''</code><code class="p">,</code>  
<code class="lineno">20</code>                                                     <code class="k">new</code> <code class="nx">SoapError</code><code class="p">()))</code>
<code class="lineno">21</code>     <code class="p">{</code>
<code class="lineno">22</code>       <code class="nv">$GLOBALS</code><code class="p">[</code><code class="s1">'log'</code><code class="p">]</code><code class="o">-&gt;</code><code class="na">info</code><code class="p">(</code><code class="s1">'End: write_log_message.'</code><code class="p">);</code>
<code class="lineno">23</code>       <code class="k">return</code> <code class="k">false</code><code class="p">;</code>
<code class="lineno">24</code>     <code class="p">}</code>
<code class="lineno">25</code>     <code class="nv">$GLOBALS</code><code class="p">[</code><code class="s1">'log'</code><code class="p">]</code><code class="o">-&gt;</code><code class="na">info</code><code class="p">(</code><code class="nv">$message</code><code class="p">);</code>
<code class="lineno">26</code>     <code class="k">return</code> <code class="k">true</code><code class="p">;</code>
<code class="lineno">27</code>   <code class="p">}</code>
<code class="lineno">28</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>Next we create the registry file which will register our new method.</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.6: Custom v4_1 web service registry</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code>     <code class="k">require_once</code> <code class="s1">'service/v4_1/registry.php'</code><code class="p">;</code>
<code class="lineno"> 3</code>     <code class="k">class</code> <code class="nc">registry_v4_1_custom</code> <code class="k">extends</code> <code class="nx">registry_v4_1</code>
<code class="lineno"> 4</code>     <code class="p">{</code>
<code class="lineno"> 5</code>         <code class="k">protected</code> <code class="k">function</code> <code class="nf">registerFunction</code><code class="p">()</code>
<code class="lineno"> 6</code>         <code class="p">{</code>
<code class="lineno"> 7</code>             <code class="k">parent</code><code class="o">::</code><code class="na">registerFunction</code><code class="p">();</code>
<code class="lineno"> 8</code>             <code class="nv">$this</code><code class="o">-&gt;</code><code class="na">serviceClass</code><code class="o">-&gt;</code><code class="na">registerFunction</code><code class="p">(</code><code class="s1">'write_log_message'</code><code class="p">,</code> 
<code class="lineno"> 9</code>                                                   <code class="k">array</code><code class="p">(</code>
<code class="lineno">10</code>                                                     <code class="s1">'session'</code><code class="o">=&gt;</code><code class="s1">'xsd:string'</code><code class="p">,</code>
<code class="lineno">11</code>                                                     <code class="s1">'message'</code><code class="o">=&gt;</code><code class="s1">'xsd:string'</code><code class="p">),</code> 
<code class="lineno">12</code>                                                   <code class="k">array</code><code class="p">(</code>
<code class="lineno">13</code>                                                     <code class="s1">'return'</code><code class="o">=&gt;</code><code class="s1">'xsd:boolean'</code><code class="p">)</code>
<code class="lineno">14</code>                                                   <code class="p">);</code>
<code class="lineno">15</code>         <code class="p">}</code>
<code class="lineno">16</code>     <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>Finally we create the entry point. This is the actual file that will be called
by our API clients. This will reference the two files which we have created and will call
the webservice implementation with our files.</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.7: Custom v4_1 REST Entry point</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> <code class="nb">chdir</code><code class="p">(</code><code class="s1">'../../..'</code><code class="p">);</code>
<code class="lineno"> 3</code> 
<code class="lineno"> 4</code> <code class="k">require_once</code> <code class="s1">'SugarWebServiceImplv4_1_custom.php'</code><code class="p">;</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code> <code class="nv">$webservice_path</code> <code class="o">=</code> <code class="s1">'service/core/SugarRestService.php'</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="nv">$webservice_class</code> <code class="o">=</code> <code class="s1">'SugarRestService'</code><code class="p">;</code>
<code class="lineno"> 8</code> <code class="nv">$webservice_impl_class</code> <code class="o">=</code> <code class="s1">'SugarWebServiceImplv4_1_custom'</code><code class="p">;</code>
<code class="lineno"> 9</code> <code class="nv">$registry_path</code> <code class="o">=</code> <code class="s1">'custom/service/v4_1_custom/registry.php'</code><code class="p">;</code>
<code class="lineno">10</code> <code class="nv">$registry_class</code> <code class="o">=</code> <code class="s1">'registry_v4_1_custom'</code><code class="p">;</code>
<code class="lineno">11</code> <code class="nv">$location</code> <code class="o">=</code> <code class="s1">'custom/service/v4_1_custom/rest.php'</code><code class="p">;</code>
<code class="lineno">12</code> 
<code class="lineno">13</code> <code class="k">require_once</code> <code class="s1">'service/core/webservice.php'</code><code class="p">;</code>
</pre></div>

  <hr /></div>

<div class="code-block">
  <p class="codeblock-title">Example 16.8: Custom v4_1 SOAP Entry point</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> <code class="nb">chdir</code><code class="p">(</code><code class="s1">'../../..'</code><code class="p">);</code>
<code class="lineno"> 3</code> <code class="k">require_once</code><code class="p">(</code><code class="s1">'SugarWebServiceImplv4_1_custom.php'</code><code class="p">);</code>
<code class="lineno"> 4</code> <code class="nv">$webservice_class</code> <code class="o">=</code> <code class="s1">'SugarSoapService2'</code><code class="p">;</code>
<code class="lineno"> 5</code> <code class="nv">$webservice_path</code> <code class="o">=</code> <code class="s1">'service/v2/SugarSoapService2.php'</code><code class="p">;</code>
<code class="lineno"> 6</code> <code class="nv">$webservice_impl_class</code> <code class="o">=</code> <code class="s1">'SugarWebServiceImplv4_1_custom'</code><code class="p">;</code>
<code class="lineno"> 7</code> <code class="nv">$registry_class</code> <code class="o">=</code> <code class="s1">'registry_v4_1_custom'</code><code class="p">;</code>
<code class="lineno"> 8</code> <code class="nv">$registry_path</code> <code class="o">=</code> <code class="s1">'custom/service/v4_1_custom/registry.php'</code><code class="p">;</code>
<code class="lineno"> 9</code> <code class="nv">$location</code> <code class="o">=</code> <code class="s1">'custom/service/v4_1_custom/soap.php'</code><code class="p">;</code>
<code class="lineno">10</code> <code class="k">require_once</code><code class="p">(</code><code class="s1">'service/core/webservice.php'</code><code class="p">);</code>
</pre></div>

  <hr /></div>

<h4 id="leanpub-auto-usage-1">Usage</h4>
<p>We can now use our custom endpoint. This is identical to using the API as detailed
above, except that we use our custom entry point for either the SOAP WSDL or REST
URL. For example using the same SuiteCRM location (<code>example.com/suitecrm</code>) as
the above examples and using <code>v4_1</code>, we would use the following</p>

<div class="code-block">
  <p class="codeblock-title">Example 16.9: Custom v4_1 URLS</p>

  <hr /><div class="highlight"><pre><code class="lineno">1</code> <code class="c1">//SOAP WSDL</code>
<code class="lineno">2</code> <code class="nx">example</code><code class="o">.</code><code class="nx">com</code><code class="o">/</code><code class="nx">suitecrm</code><code class="o">/</code><code class="nx">custom</code><code class="o">/</code><code class="nx">service</code><code class="o">/</code><code class="nx">v4_1_custom</code><code class="o">/</code><code class="nx">soap</code><code class="o">.</code><code class="nx">php</code><code class="o">?</code><code class="nx">wsdl</code>
<code class="lineno">3</code> <code class="c1">//REST URL</code>
<code class="lineno">4</code> <code class="nx">example</code><code class="o">.</code><code class="nx">com</code><code class="o">/</code><code class="nx">suitecrm</code><code class="o">/</code><code class="nx">custom</code><code class="o">/</code><code class="nx">service</code><code class="o">/</code><code class="nx">v4_1_custom</code><code class="o">/</code><code class="nx">rest</code><code class="o">.</code><code class="nx">php</code>
</pre></div>

  <hr /></div>
</div>
</body>
</html>
