<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>13. Scheduled Tasks</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<div>
<h2 id="scheduled-tasks-chapter">
<span class="section-number">13. </span>Scheduled Tasks</h2>

<h3 id="leanpub-auto-intro-2">Intro</h3>
<p>Scheduled tasks are performed in SuiteCRM by the scheduler module. Jobs are placed into
the queue either through the defined scheduled tasks or, for one off tasks, by code
creating job objects. Note that both scheduled tasks and using the job queue requires
that you have the schedulers set up. This will vary depending on your system but
usually requires adding an entry either to Cron (for Linux systems) or to the windows
scheduled tasks (for windows). Opening the scheduled tasks page within SuiteCRM
will let you know the format for the entry.</p>

<h3 id="leanpub-auto-scheduler">Scheduler</h3>
<p>Scheduled tasks allow SuiteCRM to perform recurring tasks. Examples of these which
ship with SuiteCRM include checking for incoming mail, sending email reminder notifications
and indexing the full text search. What if you want to create your own tasks?</p>

<p>SuiteCRM lets you define your own Scheduler. We do this by creating a file in<br /><code>custom/Extension/modules/Schedulers/Ext/ScheduledTasks/</code>. You can give this file
a name of your choice but it is more helpful to give it a descriptive name. Let’s create a simple file
named<br /><code>custom/Extension/modules/Schedulers/Ext/ScheduledTasks/CleanMeetingsScheduler.php</code>.
This will add a new job to the job strings and a new method that the scheduler will
call:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.1: Example Clean Meetings Scheduler</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno"> 2</code> <code class="cm">/*</code>
<code class="lineno"> 3</code> <code class="cm"> * We add the method name to the $job_strings array.</code>
<code class="lineno"> 4</code> <code class="cm"> * This is the method that jobs for this scheduler will call.</code>
<code class="lineno"> 5</code> <code class="cm"> */</code>
<code class="lineno"> 6</code> <code class="nv">$job_strings</code><code class="p">[]</code> <code class="o">=</code> <code class="s1">'cleanMeetingsScheduler'</code><code class="p">;</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code> <code class="sd">/**</code>
<code class="lineno"> 9</code> <code class="sd"> * Example scheduled job to change any 'Planned' meetings older than a month</code>
<code class="lineno">10</code> <code class="sd"> * to 'Not Held'.</code>
<code class="lineno">11</code> <code class="sd"> * @return bool</code>
<code class="lineno">12</code> <code class="sd"> */</code>
<code class="lineno">13</code> <code class="k">function</code> <code class="nf">cleanMeetingsScheduler</code><code class="p">(){</code>
<code class="lineno">14</code>   <code class="c1">//Get the cutoff date for which meetings will be considered</code>
<code class="lineno">15</code> 	<code class="nv">$cutOff</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">DateTime</code><code class="p">(</code><code class="s1">'now - 1 month'</code><code class="p">);</code>
<code class="lineno">16</code> 	<code class="nv">$cutOff</code> <code class="o">=</code> <code class="nv">$cutOff</code><code class="o">-&gt;</code><code class="na">format</code><code class="p">(</code><code class="s1">'Y-m-d H:i:s'</code><code class="p">);</code>
<code class="lineno">17</code> 
<code class="lineno">18</code> 	<code class="c1">//Get an instance of the meetings bean for querying</code>
<code class="lineno">19</code>   <code class="c1">//see the Working With Beans chapter.</code>
<code class="lineno">20</code>   <code class="nv">$bean</code> <code class="o">=</code> <code class="nx">BeanFactory</code><code class="o">::</code><code class="na">getBean</code><code class="p">(</code><code class="s1">'Meetings'</code><code class="p">);</code>
<code class="lineno">21</code> 
<code class="lineno">22</code>   <code class="c1">//Get the list of meetings older than the cutoff that are marked as Planned</code>
<code class="lineno">23</code>   <code class="nv">$query</code> <code class="o">=</code> <code class="s2">"meetings.date_start &lt; '</code><code class="si">$cutOff</code><code class="s2">' AND meetings.status = 'Planned'"</code><code class="p">;</code>
<code class="lineno">24</code>   <code class="nv">$meetings</code> <code class="o">=</code> <code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">get_full_list</code><code class="p">(</code><code class="s1">''</code><code class="p">,</code><code class="nv">$query</code><code class="p">);</code>
<code class="lineno">25</code> 
<code class="lineno">26</code>   <code class="k">foreach</code><code class="p">(</code><code class="nv">$meetings</code> <code class="k">as</code> <code class="nv">$meeting</code><code class="p">){</code>
<code class="lineno">27</code>     <code class="c1">//Mark each meeting as Not Held</code>
<code class="lineno">28</code>     <code class="nv">$meeting</code><code class="o">-&gt;</code><code class="na">status</code> <code class="o">=</code> <code class="s1">'Not Held'</code><code class="p">;</code>
<code class="lineno">29</code>     <code class="c1">//Save the meeting changes</code>
<code class="lineno">30</code>     <code class="nv">$meeting</code><code class="o">-&gt;</code><code class="na">save</code><code class="p">();</code>
<code class="lineno">31</code>   <code class="p">}</code>
<code class="lineno">32</code>   <code class="c1">//Signify we have successfully ran</code>
<code class="lineno">33</code>   <code class="k">return</code> <code class="k">true</code><code class="p">;</code>
<code class="lineno">34</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>We also make sure that we add a language file in<br /><code>custom/Extension/modules/Schedulers/Ext/Language/en_us.cleanMeetingsScheduler.php</code>
again, the name of the file doesn’t matter but it is helpful to use something descriptive.
This will define the language string for our job so the user sees a nice label.
See the section on language strings for more information.
The key for the mod strings will be LBL_UPPERMETHODNAME. In our case our method
name is <code>cleanMeetingsScheduler</code> so our language label key will be <code>LBL_CLEANMEETINGSSCHEDULER</code>.</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.2: Example Language string for Clean Meetings Scheduler</p>

  <hr /><div class="highlight"><pre><code class="lineno">1</code> <code class="o">&lt;?</code><code class="nx">php</code>
<code class="lineno">2</code> <code class="c1">//We add the mod string for our method here.</code>
<code class="lineno">3</code> <code class="nv">$mod_strings</code><code class="p">[</code><code class="s1">'LBL_CLEANMEETINGSSCHEDULER'</code><code class="p">]</code> <code class="o">=</code> <code class="s1">'Mark old, planned meetings as Not \</code>
<code class="lineno">4</code> <code class="s1">Held'</code><code class="p">;</code>
</pre></div>

  <hr /></div>

<p>If we perform a repair and rebuild our method will now be packaged up into the scheduler
ext file (see the Extensions section for more information on this process) and
will be available in the schedulers page. Note that for any changes to the scheduler
method you will need to perform another quick repair and rebuild - even in developer mode.
We can now create a new scheduler to call our new method:</p>

<div class="image-with-caption center">
  <img src="images/CreateMeetingsScheduler.png" alt="Creating a scheduler that uses our new method" /><p class="caption">Creating a scheduler that uses our new method</p>
</div>

<p>This will now behave just like any other scheduler and we can have this run as often
(or as rarely) as we would like. Take care here. The default frequency is every one minute.
If your task is heavy duty or long running this may not be what you would prefer. Here we
settle for once a day.</p>

<h3 id="leanpub-auto-job-queue">Job Queue</h3>
<p>Sometimes you will require code to perform a long running task but you do not need 
the user to wait for this to be completed. A good example of this is sending an email
in a logic hook (see the Logic Hooks chapter for information on these). Assuming we have
the following logic hook:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.3: Example Email sending Logic Hook</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="k">class</code> <code class="nc">SomeClass</code>
<code class="lineno"> 2</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">function</code> <code class="nf">SomeMethod</code><code class="p">(</code><code class="nv">$bean</code><code class="p">,</code> <code class="nv">$event</code><code class="p">,</code> <code class="nv">$arguments</code><code class="p">)</code>
<code class="lineno"> 4</code>     <code class="p">{</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code>         <code class="c1">//Perform some setup of the email class</code>
<code class="lineno"> 7</code>         <code class="k">require_once</code> <code class="s2">"include/SugarPHPMailer.php"</code><code class="p">;</code>
<code class="lineno"> 8</code>         <code class="nv">$mailer</code><code class="o">=</code><code class="k">new</code> <code class="nx">SugarPHPMailer</code><code class="p">();</code>
<code class="lineno"> 9</code>         <code class="nv">$admin</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Administration</code><code class="p">();</code>
<code class="lineno">10</code>         <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">retrieveSettings</code><code class="p">();</code>
<code class="lineno">11</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">prepForOutbound</code><code class="p">();</code>
<code class="lineno">12</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">setMailerForSystem</code><code class="p">();</code>
<code class="lineno">13</code>         <code class="nv">$admin</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Administration</code><code class="p">();</code>
<code class="lineno">14</code>         <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">retrieveSettings</code><code class="p">();</code>
<code class="lineno">15</code>         <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">settings</code><code class="p">[</code><code class="s1">'notify_fromname'</code><code class="p">]</code>
<code class="lineno">16</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">From</code>     <code class="o">=</code> <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">settings</code><code class="p">[</code><code class="s1">'notify_fromaddress'</code><code class="p">]</code>
<code class="lineno">17</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">FromName</code> <code class="o">=</code> <code class="nv">$emailSettings</code><code class="p">[</code><code class="s1">'from_name'</code><code class="p">];</code>
<code class="lineno">18</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">IsHTML</code><code class="p">(</code><code class="k">true</code><code class="p">);</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>         <code class="c1">//Add message and recipient.</code>
<code class="lineno">21</code>         <code class="c1">//We could go all out here and load and populate an email template</code>
<code class="lineno">22</code>         <code class="c1">//or get the email address from the bean</code>
<code class="lineno">23</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Subject</code> <code class="o">=</code> <code class="s1">'My Email Notification! '</code><code class="o">.</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">name</code><code class="p">;</code>
<code class="lineno">24</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Body</code> <code class="o">=</code> <code class="nv">$event</code><code class="o">.</code> <code class="s1">' fired for bean '</code><code class="o">.</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">name</code><code class="p">;</code>
<code class="lineno">25</code>         <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">AddAddress</code><code class="p">(</code><code class="s1">'Jim@example.com'</code><code class="p">);</code>
<code class="lineno">26</code>         <code class="k">return</code> <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Send</code><code class="p">();</code>
<code class="lineno">27</code>     <code class="p">}</code>
<code class="lineno">28</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>This will work fine. However you do not want the user to have to wait for the email
to be sent out as this can cause the UI to feel sluggish. Instead
you can create a Job and place it into the job queue and this will be picked by the
scheduler. Let’s look at an example of how you would do this.</p>

<p>First we want our Logic Hook class to create the scheduled job:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.4: Example Scheduled Job Creation</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="k">class</code> <code class="nc">SomeClass</code>
<code class="lineno"> 2</code> <code class="p">{</code>
<code class="lineno"> 3</code>     <code class="k">function</code> <code class="nf">SomeMethod</code><code class="p">(</code><code class="nv">$bean</code><code class="p">,</code> <code class="nv">$event</code><code class="p">,</code> <code class="nv">$arguments</code><code class="p">)</code>
<code class="lineno"> 4</code>     <code class="p">{</code>
<code class="lineno"> 5</code>       <code class="k">require_once</code> <code class="s1">'include/SugarQueue/SugarJobQueue.php'</code><code class="p">;</code>
<code class="lineno"> 6</code>       <code class="nv">$scheduledJob</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">SchedulersJob</code><code class="p">();</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code>       <code class="c1">//Give it a useful name</code>
<code class="lineno"> 9</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">name</code> <code class="o">=</code> <code class="s2">"Email job for </code><code class="si">{</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">module_name</code><code class="si">}</code><code class="s2"> </code><code class="si">{</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">id</code><code class="si">}</code><code class="s2">"</code><code class="p">;</code>
<code class="lineno">10</code> 
<code class="lineno">11</code>       <code class="c1">//Jobs need an assigned user in order to run. You can use the id</code>
<code class="lineno">12</code>       <code class="c1">//of the current user if you wish, grab the assigned user from the</code>
<code class="lineno">13</code>       <code class="c1">//current bean or anything you like.</code>
<code class="lineno">14</code>       <code class="c1">//Here we use the default admin user id for simplicity</code>
<code class="lineno">15</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">assigned_user_id</code> <code class="o">=</code> <code class="s1">'1'</code><code class="p">;</code>
<code class="lineno">16</code> 
<code class="lineno">17</code>       <code class="c1">//Pass the information that our Email job will need</code>
<code class="lineno">18</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">data</code> <code class="o">=</code> <code class="nb">json_encode</code><code class="p">(</code><code class="k">array</code><code class="p">(</code>
<code class="lineno">19</code>                                             <code class="s1">'id'</code> <code class="o">=&gt;</code> <code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">id</code><code class="p">,</code>
<code class="lineno">20</code>                                             <code class="s1">'module'</code> <code class="o">=&gt;</code> <code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">module_name</code><code class="p">)</code>
<code class="lineno">21</code>                                         <code class="p">);</code>
<code class="lineno">22</code> 
<code class="lineno">23</code>       <code class="c1">//Tell the scheduler what class to use</code>
<code class="lineno">24</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">target</code> <code class="o">=</code> <code class="s2">"class::BeanEmailJob"</code><code class="p">;</code>
<code class="lineno">25</code> 
<code class="lineno">26</code>       <code class="nv">$queue</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">SugarJobQueue</code><code class="p">();</code>
<code class="lineno">27</code>       <code class="nv">$queue</code><code class="o">-&gt;</code><code class="na">submitJob</code><code class="p">(</code><code class="nv">$scheduledJob</code><code class="p">);</code>
<code class="lineno">28</code>     <code class="p">}</code>
<code class="lineno">29</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>Next we create the BeanEmailJob class. This is placed into the<br /><code>custom/Extensions/modules/Schedulers/Ext/ScheduledTasks/</code> directory with the same
name as the class. So in our example we will have:<br /><code>custom/Extensions/modules/Schedulers/Ext/ScheduledTasks/BeanEmailJob.php</code></p>

<div class="code-block">
  <p class="codeblock-title">Example 13.5: Example Scheduler job</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 1</code> <code class="k">class</code> <code class="nc">BeanEmailJob</code> <code class="k">implements</code> <code class="nx">RunnableSchedulerJob</code>
<code class="lineno"> 2</code> <code class="p">{</code>
<code class="lineno"> 3</code>   <code class="k">public</code> <code class="k">function</code> <code class="nf">run</code><code class="p">(</code><code class="nv">$arguments</code><code class="p">)</code>
<code class="lineno"> 4</code>   <code class="p">{</code>
<code class="lineno"> 5</code> 
<code class="lineno"> 6</code>     <code class="c1">//Only different part of the email code.</code>
<code class="lineno"> 7</code>     <code class="c1">//We grab the bean using the supplied arguments.</code>
<code class="lineno"> 8</code>     <code class="nv">$arguments</code> <code class="o">=</code> <code class="nb">json_decode</code><code class="p">(</code><code class="nv">$arguments</code><code class="p">,</code><code class="mi">1</code><code class="p">);</code>
<code class="lineno"> 9</code>     <code class="nv">$bean</code> <code class="o">=</code> <code class="nx">BeanFactory</code><code class="o">::</code><code class="na">getBean</code><code class="p">(</code><code class="nv">$arguments</code><code class="p">[</code><code class="s1">'module'</code><code class="p">],</code><code class="nv">$arguments</code><code class="p">[</code><code class="s1">'id'</code><code class="p">]);</code>
<code class="lineno">10</code> 
<code class="lineno">11</code>     <code class="c1">//Perform some setup of the email class</code>
<code class="lineno">12</code>     <code class="k">require_once</code> <code class="s2">"include/SugarPHPMailer.php"</code><code class="p">;</code>
<code class="lineno">13</code>     <code class="nv">$mailer</code><code class="o">=</code><code class="k">new</code> <code class="nx">SugarPHPMailer</code><code class="p">();</code>
<code class="lineno">14</code>     <code class="nv">$admin</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Administration</code><code class="p">();</code>
<code class="lineno">15</code>     <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">retrieveSettings</code><code class="p">();</code>
<code class="lineno">16</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">prepForOutbound</code><code class="p">();</code>
<code class="lineno">17</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">setMailerForSystem</code><code class="p">();</code>
<code class="lineno">18</code>     <code class="nv">$admin</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">Administration</code><code class="p">();</code>
<code class="lineno">19</code>     <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">retrieveSettings</code><code class="p">();</code>
<code class="lineno">20</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">From</code>     <code class="o">=</code> <code class="nv">$admin</code><code class="o">-&gt;</code><code class="na">settings</code><code class="p">[</code><code class="s1">'notify_fromaddress'</code><code class="p">];</code>
<code class="lineno">21</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">FromName</code> <code class="o">=</code> <code class="nv">$emailSettings</code><code class="p">[</code><code class="s1">'from_name'</code><code class="p">];</code>
<code class="lineno">22</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">IsHTML</code><code class="p">(</code><code class="k">true</code><code class="p">);</code>
<code class="lineno">23</code> 
<code class="lineno">24</code>     <code class="c1">//Add message and recipient.</code>
<code class="lineno">25</code>     <code class="c1">//We could go all out here and load and populate an email template</code>
<code class="lineno">26</code>     <code class="c1">//or get the email address from the bean</code>
<code class="lineno">27</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Subject</code> <code class="o">=</code> <code class="s1">'My Email Notification! '</code><code class="o">.</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">name</code><code class="p">;</code>
<code class="lineno">28</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Body</code> <code class="o">=</code> <code class="nv">$event</code><code class="o">.</code> <code class="s1">' fired for bean '</code><code class="o">.</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">name</code><code class="p">;</code>
<code class="lineno">29</code>     <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">AddAddress</code><code class="p">(</code><code class="s1">'Jim@example.com'</code><code class="p">);</code>
<code class="lineno">30</code>     <code class="k">return</code> <code class="nv">$mailer</code><code class="o">-&gt;</code><code class="na">Send</code><code class="p">();</code>
<code class="lineno">31</code>   <code class="p">}</code>
<code class="lineno">32</code>   <code class="k">public</code> <code class="k">function</code> <code class="nf">setJob</code><code class="p">(</code><code class="nx">SchedulersJob</code> <code class="nv">$job</code><code class="p">)</code>
<code class="lineno">33</code>   <code class="p">{</code>
<code class="lineno">34</code>     <code class="nv">$this</code><code class="o">-&gt;</code><code class="na">job</code> <code class="o">=</code> <code class="nv">$job</code><code class="p">;</code>
<code class="lineno">35</code>   <code class="p">}</code>
<code class="lineno">36</code> <code class="p">}</code>
</pre></div>

  <hr /></div>

<p>Now whenever a user triggers the hook it will be much quicker since we are simply persisting
a little info to the database. The scheduler will run this in the background.</p>

<h4 id="leanpub-auto-retries">Retries</h4>
<p>Occasionally you may have scheduled jobs which could fail intermittently. Perhaps
you have a job which calls an external API. If the API is unavailable it would be
unfortunate if the job failed and was never retried. Fortunately the
SchedulersJob class has two properties which govern how retries are handled.
These are <code>requeue</code> and <code>retry_count</code>.</p>

<dl><dt><code>requeue</code></dt>
  <dd>Signifies that this job is eligible for retries.</dd>
  <dt><code>retry_count</code></dt>
  <dd>Signifies how many retries remain for this job. If the job fails this value will
be decremented.</dd>
</dl><p>We can revisit our previous example and add two retries:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.6: Setting the retry count on a scheduled job</p>

  <hr /><div class="highlight"><pre><code class="lineno"> 6</code>       <code class="nv">$scheduledJob</code> <code class="o">=</code> <code class="k">new</code> <code class="nx">SchedulersJob</code><code class="p">();</code>
<code class="lineno"> 7</code> 
<code class="lineno"> 8</code>       <code class="c1">//Give it a useful name</code>
<code class="lineno"> 9</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">name</code> <code class="o">=</code> <code class="s2">"Email job for </code><code class="si">{</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">module_name</code><code class="si">}</code><code class="s2"> </code><code class="si">{</code><code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">id</code><code class="si">}</code><code class="s2">"</code><code class="p">;</code>
<code class="lineno">10</code> 
<code class="lineno">11</code>       <code class="c1">//Jobs need an assigned user in order to run. You can use the id</code>
<code class="lineno">12</code>       <code class="c1">//of the current user if you wish, grab the assigned user from the</code>
<code class="lineno">13</code>       <code class="c1">//current bean or anything you like.</code>
<code class="lineno">14</code>       <code class="c1">//Here we use the default admin user id for simplicity</code>
<code class="lineno">15</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">assigned_user_id</code> <code class="o">=</code> <code class="s1">'1'</code><code class="p">;</code>
<code class="lineno">16</code> 
<code class="lineno">17</code>       <code class="c1">//Pass the information that our Email job will need</code>
<code class="lineno">18</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">data</code> <code class="o">=</code> <code class="nb">json_encode</code><code class="p">(</code><code class="k">array</code><code class="p">(</code>
<code class="lineno">19</code>                                             <code class="s1">'id'</code> <code class="o">=&gt;</code> <code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">id</code><code class="p">,</code>
<code class="lineno">20</code>                                             <code class="s1">'module'</code> <code class="o">=&gt;</code> <code class="nv">$bean</code><code class="o">-&gt;</code><code class="na">module_name</code><code class="p">)</code>
<code class="lineno">21</code>                                         <code class="p">);</code>
<code class="lineno">22</code> 
<code class="lineno">23</code>       <code class="c1">//Tell the scheduler what class to use</code>
<code class="lineno">24</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">target</code> <code class="o">=</code> <code class="s2">"class::BeanEmailJob"</code><code class="p">;</code>
<code class="lineno">25</code> 
<code class="lineno">26</code>       <code class="c1">//Mark this job for 2 retries.</code>
<code class="lineno">27</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">requeue</code> <code class="o">=</code> <code class="k">true</code><code class="p">;</code>
<code class="lineno">28</code>       <code class="nv">$scheduledJob</code><code class="o">-&gt;</code><code class="na">retry</code> <code class="o">=</code> <code class="mi">2</code><code class="p">;</code>
</pre></div>

  <hr /></div>

<p>See the section on <a href="chap11.xhtml#logic-hooks-chapter">logic hooks</a> for more information on how job failures can be handled.</p>

<h3 id="leanpub-auto-debugging">Debugging</h3>
<p>With Scheduled tasks and jobs running in the background it can sometimes be difficult to
determine what is going on when things go wrong. If you are debugging a scheduled
task the the scheduled task page is a good place to start. For both scheduled tasks
and job queue tasks you can also check the job_queue table. For example, in MySQL
we can check the last five scheduled jobs:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.7: Example MySQL query for listing jobs</p>

  <hr /><div class="highlight"><pre><code class="k">SELECT</code> <code class="o">*</code> <code class="k">FROM</code> <code class="n">job_queue</code> <code class="k">ORDER</code> <code class="k">BY</code> <code class="n">date_entered</code> <code class="k">DESC</code> <code class="k">LIMIT</code> <code class="mi">5</code>
</pre></div>

  <hr /></div>

<p>This will give us information on the last five jobs.
Alternatively we can check on specific jobs:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.8: Example MySQL query for listing BeanEmailJobs</p>

  <hr /><div class="highlight"><pre><code class="k">SELECT</code> <code class="o">*</code> <code class="k">FROM</code> <code class="n">job_queue</code> <code class="k">WHERE</code> <code class="n">target</code> <code class="o">=</code> <code class="s1">'class::BeanEmailJob'</code>
</pre></div>

  <hr /></div>

<p>In either case this will give details for the job(s):</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.9: Example MySQL list of jobs</p>

  <hr /><div class="highlight"><pre>*************************** 1. row ***************************
assigned_user_id: 1
              id: 6cdf13d5-55e9-946e-9c98-55044c5cecee
            name: Email job for Accounts 103c4c9b-336f-0e87-782e-5501defb5900
         deleted: 0
    date_entered: 2015-03-14 14:58:15
   date_modified: 2015-03-14 14:58:25
    scheduler_id:
    execute_time: 2015-03-14 14:58:00
          status: done
      resolution: success
         message: NULL
          target: class::BeanEmailJob
            data: {"id":"103c4c9b-336f-0e87-782e-5501defb5900","module":"Account\
s"}
         requeue: 0
     retry_count: NULL
   failure_count: NULL
       job_delay: 0
          client: CRON3b06401793b3975cd00c0447c071ef9a:7781
percent_complete: NULL
1 row in set (0.00 sec)
</pre></div>

  <hr /></div>

<p>Here we can check the status, resolution and message fields. If the status is
<code>queued</code> then either the scheduler has not yet run or it isn’t running.
Double check your Cron settings if this is the case.</p>

<p>It may be the case that the job has ran but failed for some reason. In this case
you will receive a message telling you to check the logs. Checking the logs usually
provides enough information, particularly if you have made judicious use of logging
(see the chapter on logging) in your job.</p>

<p>It is possible that the job is failing outright, in which case your logging may not receive
output before the scheduler exits. In this case you can usually check your PHP logs.</p>

<p>As a last resort you can manually run the scheduler from the SuiteCRM directory using:</p>

<div class="code-block">
  <p class="codeblock-title">Example 13.10: Running the scheduler manually</p>

  <hr /><div class="highlight"><pre>php -f cron.php
</pre></div>

  <hr /></div>

<p>Using this in addition to outputting any useful information
should track down even the oddest of bugs.</p>
</div>
</body>
</html>
